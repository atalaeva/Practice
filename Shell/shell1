#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void printtext(char**t, int num, FILE *fout)
{
    for (int i = 0; i<num; i++ )
    {
        fprintf(fout, "\n%s", t[i]);
    }
    fprintf(fout, "\n");
}
int main(int argc, char** argv)
{
    char c, c1;
    char **text = NULL;
    int cnum = 0,wnum = 0, csize = 4, wsize = 4;
    int quotesflag = 0, doubleflag = 0;
    FILE *fin, *fout;
    argv++;
    if ((*argv != 0) && (strcmp("-i",*argv) == 0))
    {
        if ((fin = fopen(*++argv, "r")) == NULL)
            return 1;
        argv++;
    }
    else
        fin = stdin; // стандартный ввод
    if ((*argv != 0) && (strcmp("-o",*argv) == 0))
    {
        if ((fout = fopen(*++argv, "w")) == NULL)
            return 1;
    }
    else
        fout = stdout;


    text = malloc(wsize*sizeof(char*));
    while( (c = getc(fin))!= EOF)
    {
        while((c==' ')||(c == '\n'))
        {
            c = getc(fin);
        }
        text[wnum] = malloc(csize*(sizeof(char)));
        if (c =='"')
        {
            quotesflag++;
            c = getc(fin);
        }

        while(( (c!=' ') || (quotesflag%2==1) ) && (c!='\n') && (c!=EOF))
        {
            //& && | || ; > >> < ( )
            if(((c =='&')|| ( c == '|')||(c == '>')) && (doubleflag == 0))
            {
                if(quotesflag%2==1)
                {
                    fprintf(fout, "ERROR\n");
                    return 1;
                }
                doubleflag = 1;
                c1=c;
                break;
            }
            if(doubleflag == 1)
            {
                doubleflag = 0;
                if((c =='&')|| ( c == '|')||(c == '>'))
                {
                    for(int y = 0; y<2;y++)
                    {
                        text[wnum][cnum] = c1;
                        cnum++;
                    }
                    break;
                }
                else
                {
                    text[wnum][cnum] = c1;
                    cnum++;
                    text[wnum][cnum] = '\0';
                    cnum = 0;
                    csize =4;
                    wnum++;
                    if(wsize==(wnum+1))
                    {
                        wsize*=2;
                        text = realloc(text, wsize*(sizeof(char*)));
                    }
                    text[wnum] = malloc(csize*(sizeof(char)));
                }
            }
            // ;   < ( )
            if((c==';')||(c=='<')||(c=='(')||(c==')'))
            {
                if(cnum!=0)
                {
                    text[wnum][cnum] = '\0';
                    cnum = 0;
                    csize =4;
                    wnum++;
                    if(wsize==(wnum+1))
                    {
                        wsize*=2;
                        text = realloc(text, wsize*(sizeof(char*)));
                    }
                    text[wnum] = malloc(csize*(sizeof(char)));
                }
                text[wnum][cnum] = c;
                cnum++;
                break;
            }

            text[wnum][cnum] = c;
            cnum++;
            c = getc(fin);

            if(csize==(cnum+1))
            {
                csize*=2;
                text[wnum] = realloc(text[wnum], csize*sizeof(char));
            }
            if (c =='"')
            {
                quotesflag++;
                c = getc(fin);
            }
        }
        if(cnum==0)
            continue;
        text[wnum][cnum] = '\0';

        cnum = 0;
        csize =4;
        wnum++;
        if(wsize==(wnum+1))
        {
            wsize*=2;
            text = realloc(text, wsize*(sizeof(char*)));
        }
        if (c==EOF) break;
    }
    if(quotesflag%2==1)
    {
        fprintf(fout, "ERROR\n");
        return 1;
    }
    printtext(text, wnum, fout);
    for (int i = 0; i<wnum; i++)
        free(text[i]);
    free(text);

    fclose(fin);
    fclose(fout);
    return 0;
}
