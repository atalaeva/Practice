#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <fcntl.h>
#include <signal.h>

struct shell
{
    char **text;
    int countcmd;
    char *in;
    char *out;
    char *add;
    struct shell *nextcmd;
    struct shell *nextcmd1;
    int bgdflag;
    int pipeflag;
    char logicflag;
};

void empty( struct shell *word)
{
    word->text = NULL;
    word->countcmd = 0;
    word->in = NULL;
    word->out = NULL;
    word->add = NULL;
    word->nextcmd = NULL;
    word->nextcmd1 = NULL;
    word->bgdflag = 0;
    word->pipeflag = 0;
    word->logicflag = '\0';
}

int bgdflagerr = 0;
int bgdcounter = 0;
int status;

int symbcheck (char *symb)
{
    if(strcmp(symb, ">") == 0)
    {
        return 1;
    }
    if(strcmp(symb, "<") == 0)
    {
        return 2;
    }
    if(strcmp(symb, ">>") == 0)
    {
        return 3;
    }
    if(strcmp(symb, "|") == 0)
    {
        return 4;
    }
    if(strcmp(symb, "&") == 0)
    {
        return 5;
    }
    if(strcmp(symb, "&&") == 0)
    {
		return 6;
	}
    if(strcmp(symb, "||") == 0)
    {
		return 7;
	}
    if(strcmp(symb, ";") == 0)
    {
		return 8;
	}
    return 0;
}
struct shell *checkcmd(char ***text)
{
    struct shell *word = malloc(sizeof(*word));
    struct shell *newstruct = word;
    empty(word);
    int s, l = 4, i = 0;
    while( (*text)[i]!=0)
    {
        s = symbcheck((*text)[i]);
        switch (s)
        {
            case 0:  //  just a command
                if (word->text == NULL)
                    word->text = malloc(l*sizeof(char*));
                if(word->countcmd == l-1)
                {
                    l *= 2;
                    word->text = realloc(word->text, l*sizeof(char*));
                }
                word->text[word->countcmd] = (*text)[i];
                word->countcmd++;
                word->text[word->countcmd] = NULL;
                i++;
                break;
            case 1:  // redirect output
                i++;
                word->out = (*text)[i];
                i++;
                break;
            case 2:  // redirect output
                i++;
                word->in = (*text)[i];
                i++;
                break;
            case 3:  // redirect append
                i++;
                word->add = (*text)[i];
                i++;
                break;
            case 4:  // conveyer
                word->nextcmd = malloc(sizeof(*word));
                word->pipeflag = 1;
                word = word->nextcmd;
                empty(word);
                i++;
                break;
            case 5: //backmode
                i++;
                word->bgdflag = 1;
                if((*text)[i] == NULL)
                {
                    bgdflagerr = 1;
                    printf("error.\n");
                    return newstruct;
                }
                else
                {
                    word->nextcmd = calloc(1, sizeof(struct shell));
                    word = word->nextcmd;
                    empty(word);
                }
                break;
            case 6:  // &&
             	(*text)++;
				newstruct->logicflag = '&';
				newstruct->nextcmd1 = checkcmd(text);
				return newstruct;
				break;
            case 7:  // ||
                (*text)++;
				newstruct->logicflag = '|';
				newstruct->nextcmd1 = checkcmd(text);
				return newstruct;
				break;
            case 8:  // ;
                (*text)++;
				newstruct->logicflag = ';';
				newstruct->nextcmd1 = checkcmd(text);
				return newstruct;
				break;
            default:
                break;
        }

    }
    return newstruct;
};


void cmdexec(struct shell *word)
{

    int fd[2], concheck = 0, file;
    struct shell *newstruct = word;
    while (word!= NULL)
    {
        int save0 = dup(0), save1 = dup(1);
        if(word->text!=NULL && strcmp(word->text[0], "exit")==0)
            exit(0);
        else if (word->text!=NULL && strcmp(word->text[0], "cd")==0)
        {
            if (word->text[1] == NULL) {
                if (chdir(getenv("HOME")) == -1) {
                    printf("Error: you are homeless\n");
                    exit(1);
                }
            } else {
                chdir(word->text[1]);
            }
        }
        else
        {
            //printf("%s 1\n", word->text[0]);
            if(concheck!=0)
            {
                dup2(fd[0], 0);
                close(fd[0]);
            }
            //printf("%s 12\n", word->text[0]);
            if(word->nextcmd)
            {
                pipe(fd);
                dup2(fd[1],1);
                close(fd[1]);
            }
            //printf("%s 123\n", word->text[0]);
            int pid = fork();
            if (pid == 0)
            {
                //printf("%s 1234\n", word->text[0]);
                if (word->bgdflag != 0) {
                    bgdcounter++;
                    printf("[%d]    %s\n", getpid(), word->text[0]);
                }
                if(word->nextcmd!=NULL)
                    close(fd[0]);

                //bgd mode
                if(word->bgdflag!=0)
                {
                    //signal(SIGINT,SIG_IGN);
                    file = open("/dev/null", O_RDONLY);
                    if(file == -1){
                        perror("error &");
                    }
                    dup2 (file,0);
                    close (file);
                }
                else
                {
                    signal(SIGINT, SIG_DFL);
                }
                // input redirection

                if( word->in!=NULL)
                {
                    file = open(word->in, O_RDONLY);
                    if(file==-1)
                        perror(word->in);
                    dup2(file, 0);
                    close(file);
                }
                // output redirection

                if( word->out!=NULL)
                {
                    file = open(word->out, O_CREAT | O_WRONLY | O_TRUNC, 0666);
                    if(file==-1)
                        perror(word->out);
                    dup2(file, 1);
                    close(file);
                }
                // output append
                if( word->add!=NULL)
                {
                    file = open(word->add, O_APPEND | O_WRONLY);
                    if(file==-1)
                        perror(word->add);
                    dup2(file, 1);
                    close(file);
                }
                execvp(word->text[0],word->text);
                perror(word->text[0]);
                exit(1);
            }
            else {// paerent
                if (pid < 0)
                    printf("Error.\n");
            }
        }
        if (word->bgdflag == 0){
            wait(NULL);
        }
        word = word->nextcmd;
        concheck++;
        dup2(save0,0);
        dup2(save1,1);
        close(save0);
        close(save1);
    }
    if (WIFEXITED(status) && !WEXITSTATUS(status) && (newstruct->logicflag == '&'))
    {
        cmdexec(newstruct->nextcmd1);
    }
    else if (newstruct->logicflag == '|'){
        if (!WIFEXITED(status) || WEXITSTATUS(status))
        {
            cmdexec(newstruct->nextcmd1);
        }
    }
    else if (newstruct->logicflag == ';')
    {
        cmdexec(newstruct->nextcmd1);
    }
    return;
}


void freestruct(struct shell *word)
{
    struct shell *temp;
    while(word!= NULL)
    {
        free(word->text);
        temp = word;
        word = word->nextcmd;
        free(temp);
    }
}

void zombie(int count){
    for(int i = 0; i <= count; i++)
    {
        waitpid(-1, NULL, WNOHANG);
    }
}

void killZomb() {
    int status, pid = waitpid(-1, &status, WNOHANG);
    while (pid > 0) {
        if (WIFEXITED(status))
        {
            printf("Command with pid [%d] is done, status: %d\n", pid, status);
        }
        else
        {
            printf("Command with pid [%d] is done, status: error\n", pid);
        }
        pid = waitpid(-1, &status, WNOHANG);
    }
}

int main(int argc, char** argv)
{
    char c, c1;
    char **text = NULL;
    int cnum = 0,wnum = 0, csize = 4, wsize = 4;
    int quotesflag = 0, doubleflag = 0;
    struct shell *word;
    printf("> ");

    FILE *fin, *fout;
    signal(SIGCHLD, killZomb);
    signal(SIGINT, SIG_IGN);

    argv++;
    if ((*argv != 0) && (strcmp("-i",*argv) == 0))
    {
        if ((fin = fopen(*++argv, "r")) == NULL)
            return(1);
        argv++;
    }
    else
        fin = stdin;
    if ((*argv != 0) && (strcmp("-o",*argv) == 0))
    {
        if ((fout = fopen(*++argv, "w")) == NULL)
            return(1);
    }
    else
        fout = stdout;


    text = (char**)malloc(wsize*sizeof(char*));
    while( (c = getc(fin))!= EOF)
    {
        while((c==' ')||(c == '\n'))
        {
            printf("> ");
            c = getc(fin);
        }
        text[wnum] = (char*)malloc(csize*(sizeof(char)));
        if (c =='"')
        {
            quotesflag++;;
            c = getc(fin);
        }

        while(( (c!=' ') || (quotesflag%2==1) ) && (c!='\n') && (c!=EOF))
        {
            if(c=='\n')
                printf("> ");
            //& && | || ; > >> < ( )
            if(((c =='&')|| ( c == '|')||(c == '>')) && (doubleflag == 0))
            {
                if(quotesflag%2==1)
                {
                    fprintf(fout, "ERROR\n");
                    return 1;
                }
                doubleflag = 1;
                c1=c;
                break;
            }
            if(doubleflag == 1)
            {
                doubleflag = 0;
                if((c =='&')|| ( c == '|')||(c == '>'))
                {
                    for(int y = 0; y<2;y++)
                    {
                        text[wnum][cnum] = c1;
                        cnum++;
                    }
                    break;
                }
                else
                {
                    text[wnum][cnum] = c1;
                    cnum++;
                    text[wnum][cnum] = '\0';
                    cnum = 0;
                    csize =4;
                    wnum++;
                    if(wsize==(wnum+1))
                    {
                        wsize*=2;
                        text = (char**)realloc(text, wsize*(sizeof(char*)));
                    }
                    text[wnum] =(char*) malloc(csize*(sizeof(char)));
                }
            }
            // ;   < ( )
            if((c==';')||(c=='<')||(c=='(')||(c==')'))
            {
                if(cnum!=0)
                {
                    text[wnum][cnum] = '\0';
                    cnum = 0;
                    csize =4;
                    wnum++;
                    if(wsize==(wnum+1))
                    {
                        wsize*=2;
                        text = (char**)realloc(text, wsize*(sizeof(char*)));
                    }
                    text[wnum] = (char*)malloc(csize*(sizeof(char)));
                }
                text[wnum][cnum] = c;
                cnum++;
                break;
            }

            text[wnum][cnum] = c;
            cnum++;
            c = getc(fin);

            if(csize==(cnum+1))
            {
                csize*=2;
                text[wnum] = (char*)realloc(text[wnum], csize*sizeof(char));
            }
            if (c =='"')
            {
                quotesflag++;
                c = getc(fin);
            }
        }
        if(c == '\n' && (quotesflag%2)!=1)
        {
            text[wnum][cnum] = '\0';
            wnum++;
            text[wnum] = NULL;

            word = checkcmd(&text);
            if(word && word->text && !bgdflagerr)
                cmdexec(word);
            printf(">");
            freestruct(word);

            for(int i = 0; i<wnum; i++)
                free(text[i]);
            cnum = 0; wnum = 0; csize = 4; wsize = 4;
            continue;
        }
        if(cnum==0)
            continue;
        text[wnum][cnum] = '\0';

        cnum = 0;
        csize =4;
        wnum++;
        if(wsize==(wnum+1))
        {
            wsize*=2;
            text = (char**)realloc(text, wsize*(sizeof(char*)));
        }
        if (c==EOF) break;
    }
    if(quotesflag%2==1)
    {
        fprintf(fout, "ERROR\n");
        return 1;
    }
    free(text);
    if (bgdcounter > 0) zombie(bgdcounter);
    fclose(fin);
    fclose(fout);
    return 0;
}
