NOT FINISHED



#include <iostream>
#include <fstream>
#include <string>
#include <cstring>
#include <vector>

using namespace std;

ifstream in("abcdefu.txt");

enum LexemeType
{
    lex_program,
    lex_int, lex_real, lex_string,
    lex_if, lex_else,
    lex_do, lex_while,
    lex_read, lex_write,
    lex_goto,
    lex_and, lex_or, lex_not,

    lex_plus, lex_minus, lex_mul, lex_div,
    lex_assign,
    lex_less, lex_greater, lex_equal, lex_le, lex_ge, lex_ne,
    lex_comma, lex_period, lex_colon, lex_semicolon,
    lex_left_bracket, lex_right_bracket,
    lex_left_curly, lex_right_curly,

    lex_number, lex_string_literal,
    lex_ident,

    lex_null
};

const char* keywords[] = {
        "program",
        "int", "real", "string",
        "if", "else",
        "do", "while",
        "read", "write",
        "goto",
        "and", "or", "not", nullptr
};
const char* separators[] = {
        "+", "-", "*", "/",
        "=",
        "<", ">", "==", "<=", ">=", "!=",
        ",", ".", ":", ";",
        "(", ")", "{", "}", nullptr
};
vector<char*> idents;
vector<string> str_literals;

struct Lexeme
{
    LexemeType type;
    int data;
    Lexeme(LexemeType t=lex_null, int d=0) : type(t), data(d) {}
    friend ostream& operator<<(ostream& stream, Lexeme lex)
    {
        stream << lex.type <<": ";
        if (lex.type < 14) //keywords
            stream << keywords[lex.data];
        else if (lex.type < 33)//separators
            stream << separators[lex.data];
        else if (lex.type == lex_number)
            stream << lex.data;
        else if (lex.type == lex_string_literal)
            stream << str_literals[lex.data];
        else
            stream << idents[lex.data];
        return stream;
    }
};

int indfind(const char* a, const char** b)// a - string that we are looking for in array b
{
    int i = 0;
    while((b[i]!= nullptr) && (strcmp(a, b[i]) != 0))
        i++;
    if (b[i] == nullptr)
        return -1;
    else
        return i;
}

Lexeme lex_get(istream& in)
{
    enum state{ start, what, numb, comm, strstate, separ};
    state Maryam = start;
    char c;
    char mas[25];
    int nummas = 0;
    int zif;
    string const_str;
    do
    {
        in.get(c);
        switch(Maryam)
        {
            case start:
                if(in.eof())
                {
                    return Lexeme(lex_null, 0);
                }
                else if(isspace(c));
                else if(isalpha(c))
                {
                    mas[nummas] = c;
                    nummas++;
                    Maryam = what;
                }
                else if (isdigit(c))
                {
                    zif = c-'0';
                    Maryam = numb;
                }
                else if(c == '"')
                {
                    Maryam = strstate;
                }
                else if (c == '/')
                {
                    if(in.peek() == '*')
                    {
                        in.get();
                        Maryam = comm;
                    }
                    else
                    {
                        in.unget();
                        Maryam = separ;
                    }
                }
                else if (                   c == '+' || c == '-' || c == '*' || c == '/' ||
                                            c == '=' || c == '<' || c == '>' || c == '!' ||
                                            c == ',' || c == '.' || c == ':' || c == ';' ||
                                            c == '(' || c == ')' || c == '{' || c == '}'
                        )
                {
                    in.unget();
                    Maryam = separ;
                }
                else throw 25;
                break;
            case what:
                if(in.eof())
                {
                    mas[nummas] = '\0';
                    int f = indfind(mas, keywords);
                    if( f== -1)
                    {
                        char* tmp = new char[nummas];
                        strcpy(tmp, mas);
                        idents.push_back(tmp);
                        return Lexeme(lex_ident, idents.size() - 1);
                    }
                    else
                    {
                        return Lexeme((LexemeType)f,f);
                    }
                }
                else if(isalnum(c))
                {
                    mas[nummas] = c;
                    nummas++;
                }
                else
                {
                    mas[nummas] = '\0';
                    in.unget();
                    int f = indfind(mas, keywords);
                    if( f== -1)
                    {
                        char* tmp = new char[nummas];
                        strcpy(tmp, mas);
                        idents.push_back(tmp);
                        return Lexeme(lex_ident, idents.size() - 1);
                    }
                    else
                    {
                        return Lexeme((LexemeType)f,f);
                    }
                }
                break;
            case numb:
                if(in.eof())
                    return Lexeme(lex_number, zif);
                else if (isdigit(c))
                {
                    zif = zif * 10 + ( c - '0' );
                }
                else
                {
                    in.unget();
                    return Lexeme(lex_number, zif);
                }
                break;
            case comm:
                if(in.eof())// eof
                {
                    throw 1;
                }
                else if(c=='*' && in.peek() == '/')
                {
                    in.get();
                    Maryam = start;
                }
                break;
            case strstate:
                if(in.eof())// eof
                {
                    throw 2;
                }
                else if(c!='"')
                {
                    const_str += c;
                }
                else
                {
                    str_literals.push_back(const_str);
                    return Lexeme(lex_string_literal, str_literals.size() - 1);
                }
                break;
            case separ:
                char sep[3];
                sep[0] = c;
                if (c == '=' || c == '<' || c == '>' || c == '!')
                {
                    if (in.peek() == '=')
                    {
                        in.get(sep[1]);
                        sep[2] = '\0';
                    }
                    else if (c == '!')
                        throw 3;
                    else
                        sep[1] = '\0';
                }
                int f = indfind(sep, separators);
                return Lexeme((LexemeType)(f + 14), f);
        }
    }while(true);
}


class Parser{
    Lexeme curr_lex;
    void program();
    void declaration();
    bool type();
    void variable();
    void constanta();

    bool operatorr();
    bool expression();
    void logexpression();


    //for experssion
    void terma;
    void factor;

    //for logexpression
    void logterma;
    void logfactor;

 //   void funcforeasylife()
public:
    void analyze();

};

void Parser::analyze()
{
    curr_lex = lex_get(in);
    program();
    if(curr_lex.type==lex_null)
        cout<<"Everything is good))))) good job analyzer"<<endl;
    else
    {
        throw "Everything is bad";
    }
}

void Parser::program()
{
    if (curr_lex.type == lex_program)
        curr_lex = lex_get(in);
    else
        throw "program is absent!!!";
    if (curr_lex.type == lex_left_curly)
        curr_lex = lex_get(in);
    else
        throw "{ is absent!!!";
    declaration();
    while(operatorr());
    if (curr_lex.type == lex_right_curly)
        curr_lex = lex_get(in);
    else
        throw "} is absent!!!";

}

void Parser::declaration()
{
    while(type())
    {
        variable();
        while(curr_lex.type == lex_comma)
        {
            curr_lex = lex_get(in);
            variable();
        }
        if(curr_lex.type == lex_semicolon)
            curr_lex =lex_get(in);
        else
            throw "; is absent!!!";
    }
}

bool Parser::type()
{
    if(curr_lex.type == lex_int || curr_lex.type == lex_string)
    {
        curr_lex = lex_get(in);
        return true;
    }
    else
        return false;
}

void Parser::variable()
{
    if(curr_lex.type == lex_ident)
        curr_lex = lex_get(in);
    else
        throw "ident is absent!!!";
    if (curr_lex.type == lex_assign)
    {
        curr_lex = lex_get(in);
        constanta();
    }
}

void Parser::constanta()
{
    if(curr_lex.type == lex_number || curr_lex.type == lex_string_literal)
        curr_lex = lex_get(in);
    else
        throw "wrong!!!!!";
}

bool Parser::operatorr()
{
    if(curr_lex.type == lex_if)
    {
        curr_lex = lex_get(in);
        if(curr_lex.type == lex_left_bracket)
            curr_lex = lex_get(in);
        else
            throw "( is absent!!!";
        logexpression();
        if(curr_lex.type == lex_right_bracket)
            curr_lex = lex_get(in);
        else
            throw ") is absent!!!";
        operatorr();
        if(curr_lex.type == lex_else)
            curr_lex = lex_get(in);
        else
            throw "else is absent!!!";
        operatorr();
    }
    else if(curr_lex.type == lex_while)
    {
        curr_lex = lex_get(in);
        if(curr_lex.type == lex_left_bracket)
            curr_lex = lex_get(in);
        else
            throw "( is absent!!!";
        logexpression();
        if(curr_lex.type == lex_right_bracket)
            curr_lex = lex_get(in);
        else
            throw ") is absent!!!";
        operatorr();
    }
    else if(curr_lex.type==lex_read)
    {
        curr_lex = lex_get(in);
        if(curr_lex.type == lex_left_bracket)
            curr_lex = lex_get(in);
        else
            throw "( is absent!!!";
        if(curr_lex.type == lex_ident)
            curr_lex = lex_get(in);
        else
            throw "ident is absent!!!";
        if(curr_lex.type == lex_right_bracket)
            curr_lex = lex_get(in);
        else
            throw ") is absent!!!";
        if(curr_lex.type == lex_semicolon)
            curr_lex = lex_get(in);
        else
            throw "; is absent!!!";
    }
    else if(curr_lex.type == lex_write)
    {
        if(curr_lex.type == lex_left_bracket)
            curr_lex = lex_get(in);
        else
            throw "( is absent!!!";
        expression();
        while(curr_lex.type == lex_comma)
        {
            curr_lex = lex_get(in);
            expression();
        }
        if(curr_lex.type == lex_right_bracket)
            curr_lex = lex_get(in);
        else
            throw ") is absent!!!";
        if(curr_lex.type == lex_semicolon)
            curr_lex =lex_get(in);
        else
            throw "; is absent!!!";
    }
    else if (curr_lex.type ==lex_left_curly)
    {
        curr_lex = lex_get(in);
        while(operatorr());
        if(curr_lex.type == lex_right_curly)
            curr_lex = lex_get(in);
        else
            throw "} is absent!!!";
    }
    else if(expression())
    {
        if(curr_lex.type == lex_semicolon)
            curr_lex = lex_get(in);
        else
            throw "; is absent!!!";

    }
    else if(curr_lex.type == lex_semicolon)
        curr_lex = lex_get(in);
    else
        return false;
    return true;
}



bool Parser::expression()
{
    terma();
    while(curr_lex.type == lex_plus || curr_lex.type == lex_minus)
        terma();
}

void Parser::terma()
{
    factor();
    while(curr_lex.type == lex_div || curr_lex.type == lex_mul)
        factor();
}

void Parser::factor()
{
    if(curr_lex.type == lex_ident || curr_lex.type == lex_number ||
       curr_lex.type == lex_string_literal)
        curr_lex = lex_get(in);
    else if(curr_lex.type == lex_left_bracket)
    {
        curr_lex = lex_get(in);
        expression();
        if(curr_lex.type == lex_right_bracket)
            curr_lex = lex_get(in);
        else
            throw ") is absent!!!";
    }
}


void Parser::logexpression()
{

}

int main()
{
    Parser marpar;
    try {marpar.analyze()}
    catch (int err)
    {
        cout << err << endl;
        return 1;
    }
    catch (const char* marchar)
    {
        cout<< marchar;
        return 99;
    }
    return 0;
}
